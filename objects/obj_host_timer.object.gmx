<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set timer for 1 minute

// Set start time
seconds = 0;
minutes = 1;

// Alarm goes off every second
alarm[0]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm resets every second

// Manage seconds left
seconds -= 1;
if (seconds &lt; 0)
{
    seconds = 59;
    minutes -=1;
}   

// Manage minutes left
if (minutes &lt; 0)
{
    minutes = 0
}


// Countdown timer finishes
if (seconds == 0 &amp;&amp; minutes == 0)
{
    show_debug_message("    COUNTDOWN TIMER IS UP");    
}
else
{
    // Reset alarm
    alarm[0] = room_speed;

    htme_globalSet("minutes", minutes, buffer_u32);
    htme_globalSet("seconds", seconds, buffer_u32);
/*    
    var playerlist = htme_getPlayers();
    var playerlist_size = ds_list_size(playerlist);

    for (var i = 0; i&lt;playerlist_size; i++)
    {
        var player = ds_list_find_value(playerlist, i);
        var instance = htme_findPlayerInstance(obj_player, player);
    
        if (instance != -1)
        {
            var name = (instance).name;
            var _image_blend = (instance).image_blend;
                        
            // Store host time on clients
            (instance).seconds = seconds;
            (instance).minutes = minutes;
            
            show_debug_message((instance).name + " Time: " + string((instance).minutes) + ":" + string((instance).seconds));
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display time

//if single digit add a leading 0
display_seconds=string_repeat("0", 2-string_length(string(seconds)))+string(seconds);

//if single digit add a leading 0
display_minutes=string_repeat("0", 2-string_length(string(minutes)))+string(minutes);

// Display time
draw_set_color(c_black);
draw_set_halign(fa_center);
draw_text(x,y,"Time: " + display_minutes + ":" + display_seconds);

if (seconds == 0 &amp;&amp; minutes == 0)
{
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_text(x, y + 20, "TIME IS UP!!!!");   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
